package staking

import (
	"fmt"
	"math/big"

	"tynmo/chain"
	"tynmo/helper/common"
	"tynmo/helper/hex"
	"tynmo/helper/keccak"
	"tynmo/types"
	"tynmo/validators"
)

var (
	MinValidatorCount = uint64(1)
	MaxValidatorCount = common.MaxSafeJSInt
)

// getAddressMapping returns the key for the SC storage mapping (address => something)
//
// More information:
// https://docs.soliditylang.org/en/latest/internals/layout_in_storage.html
func getAddressMapping(address types.Address, slot int64) []byte {
	bigSlot := big.NewInt(slot)

	finalSlice := append(
		common.PadLeftOrTrim(address.Bytes(), 32),
		common.PadLeftOrTrim(bigSlot.Bytes(), 32)...,
	)

	return keccak.Keccak256(nil, finalSlice)
}

// getIndexWithOffset is a helper method for adding an offset to the already found keccak hash
func getIndexWithOffset(keccakHash []byte, offset uint64) []byte {
	bigOffset := big.NewInt(int64(offset))
	bigKeccak := big.NewInt(0).SetBytes(keccakHash)

	bigKeccak.Add(bigKeccak, bigOffset)

	return bigKeccak.Bytes()
}

// getStorageIndexes is a helper function for getting the correct indexes
// of the storage slots which need to be modified during bootstrap.
//
// It is SC dependant, and based on the SC located at:
func getStorageIndexes(validator validators.Validator, index int) *StorageIndexes {
	storageIndexes := &StorageIndexes{}
	address := validator.Addr()

	// Get the indexes for the mappings
	// The index for the mapping is retrieved with:
	// keccak(address . slot)
	// . stands for concatenation (basically appending the bytes)
	storageIndexes.AddressToIsValidatorIndex = getAddressMapping(
		address,
		addressToIsValidatorSlot,
	)

	storageIndexes.AddressToStakedAmountIndex = getAddressMapping(
		address,
		addressToStakedAmountSlot,
	)

	storageIndexes.AddressToValidatorIndexIndex = getAddressMapping(
		address,
		addressToValidatorIndexSlot,
	)

	storageIndexes.ValidatorBLSPublicKeyIndex = getAddressMapping(
		address,
		addressToBLSPublicKeySlot,
	)

	// Index for array types is calculated as keccak(slot) + index
	// The slot for the dynamic arrays that's put in the keccak needs to be in hex form (padded 64 chars)
	storageIndexes.ValidatorsIndex = getIndexWithOffset(
		keccak.Keccak256(nil, common.PadLeftOrTrim(big.NewInt(validatorsSlot).Bytes(), 32)),
		uint64(index),
	)

	return storageIndexes
}

// setBytesToStorage sets bytes data into storage map from specified base index
func setBytesToStorage(
	storageMap map[types.Hash]types.Hash,
	baseIndexBytes []byte,
	data []byte,
) {
	dataLen := len(data)
	baseIndex := types.BytesToHash(baseIndexBytes)

	if dataLen <= 31 {
		bytes := types.Hash{}

		copy(bytes[:len(data)], data)

		// Set 2*Size at the first byte
		bytes[len(bytes)-1] = byte(dataLen * 2)

		storageMap[baseIndex] = bytes

		return
	}

	// Set size at the base index
	baseSlot := types.Hash{}
	baseSlot[31] = byte(2*dataLen + 1)
	storageMap[baseIndex] = baseSlot

	zeroIndex := keccak.Keccak256(nil, baseIndexBytes)
	numBytesInSlot := 256 / 8

	for i := 0; i < dataLen; i++ {
		offset := i / numBytesInSlot

		slotIndex := types.BytesToHash(getIndexWithOffset(zeroIndex, uint64(offset)))
		byteIndex := i % numBytesInSlot

		slot := storageMap[slotIndex]
		slot[byteIndex] = data[i]

		storageMap[slotIndex] = slot
	}
}

// PredeployParams contains the values used to predeploy the PoS staking contract
type PredeployParams struct {
	MinValidatorCount uint64
	MaxValidatorCount uint64
}

// StorageIndexes is a wrapper for different storage indexes that
// need to be modified
type StorageIndexes struct {
	ValidatorsIndex              []byte // []address
	ValidatorBLSPublicKeyIndex   []byte // mapping(address => byte[])
	AddressToIsValidatorIndex    []byte // mapping(address => bool)
	AddressToStakedAmountIndex   []byte // mapping(address => uint256)
	AddressToValidatorIndexIndex []byte // mapping(address => uint256)
}

// Slot definitions for SC storage
var (
	validatorsSlot              = int64(0) // Slot 0
	addressToIsValidatorSlot    = int64(1) // Slot 1
	addressToStakedAmountSlot   = int64(2) // Slot 2
	addressToValidatorIndexSlot = int64(3) // Slot 3
	stakedAmountSlot            = int64(4) // Slot 4
	minNumValidatorSlot         = int64(5) // Slot 5
	maxNumValidatorSlot         = int64(6) // Slot 6
	addressToBLSPublicKeySlot   = int64(7) // Slot 7
)

const (
	DefaultStakedBalance = "0x8AC7230489E80000" // 10 ETH
	//nolint: lll
	StakingSCBytecode = "0x6080604052600436106101235760003560e01c80637a6eea37116100a0578063d94c111b11610064578063d94c111b1461043e578063e387a7ed14610467578063e804fbf614610492578063f90ecacc146104bd578063facd743b146104fa57610191565b80637a6eea37146103555780637dceceb814610380578063af6da36e146103bd578063c795c077146103e8578063ca1e78191461041357610191565b8063373d6132116100e7578063373d61321461028d5780633a4b66f1146102b85780633c561f04146102c257806351a9ab32146102ed578063714ff4251461032a57610191565b806302b7519914610196578063065ae171146101d35780632367f6b51461021057806325d5971f1461024d5780632def66201461027657610191565b36610191576101473373ffffffffffffffffffffffffffffffffffffffff16610537565b15610187576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017e906115cc565b60405180910390fd5b61018f61055a565b005b600080fd5b3480156101a257600080fd5b506101bd60048036038101906101b8919061165e565b610631565b6040516101ca91906116a4565b60405180910390f35b3480156101df57600080fd5b506101fa60048036038101906101f5919061165e565b610649565b60405161020791906116da565b60405180910390f35b34801561021c57600080fd5b506102376004803603810190610232919061165e565b610669565b60405161024491906116a4565b60405180910390f35b34801561025957600080fd5b50610274600480360381019061026f9190611721565b6106b2565b005b34801561028257600080fd5b5061028b61079f565b005b34801561029957600080fd5b506102a261088a565b6040516102af91906116a4565b60405180910390f35b6102c0610894565b005b3480156102ce57600080fd5b506102d76108fd565b6040516102e491906118a0565b60405180910390f35b3480156102f957600080fd5b50610314600480360381019061030f919061165e565b610aa3565b604051610321919061190c565b60405180910390f35b34801561033657600080fd5b5061033f610b43565b60405161034c91906116a4565b60405180910390f35b34801561036157600080fd5b5061036a610b4d565b6040516103779190611959565b60405180910390f35b34801561038c57600080fd5b506103a760048036038101906103a2919061165e565b610b59565b6040516103b491906116a4565b60405180910390f35b3480156103c957600080fd5b506103d2610b71565b6040516103df91906116a4565b60405180910390f35b3480156103f457600080fd5b506103fd610b77565b60405161040a91906116a4565b60405180910390f35b34801561041f57600080fd5b50610428610b7d565b6040516104359190611a32565b60405180910390f35b34801561044a57600080fd5b5061046560048036038101906104609190611b89565b610c0b565b005b34801561047357600080fd5b5061047c610ca9565b60405161048991906116a4565b60405180910390f35b34801561049e57600080fd5b506104a7610caf565b6040516104b491906116a4565b60405180910390f35b3480156104c957600080fd5b506104e460048036038101906104df9190611721565b610cb9565b6040516104f19190611be1565b60405180910390f35b34801561050657600080fd5b50610521600480360381019061051c919061165e565b610cf8565b60405161052e91906116da565b60405180910390f35b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b346004600082825461056c9190611c2b565b9250508190555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105c29190611c2b565b925050819055506105d233610d4e565b156105e1576105e033610dc6565b5b3373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d3460405161062791906116a4565b60405180910390a2565b60036020528060005260406000206000915090505481565b60016020528060005260406000206000915054906101000a900460ff1681565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6106d13373ffffffffffffffffffffffffffffffffffffffff16610537565b15610711576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610708906115cc565b60405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610793576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078a90611cab565b60405180910390fd5b61079c81610f15565b50565b6107be3373ffffffffffffffffffffffffffffffffffffffff16610537565b156107fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f5906115cc565b60405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610880576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087790611cab565b60405180910390fd5b6108886110c9565b565b6000600454905090565b6108b33373ffffffffffffffffffffffffffffffffffffffff16610537565b156108f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ea906115cc565b60405180910390fd5b6108fb61055a565b565b60606000808054905067ffffffffffffffff81111561091f5761091e611a5e565b5b60405190808252806020026020018201604052801561095257816020015b606081526020019060019003908161093d5790505b50905060005b600080549050811015610a9b576007600080838154811061097c5761097b611ccb565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080546109ec90611d29565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1890611d29565b8015610a655780601f10610a3a57610100808354040283529160200191610a65565b820191906000526020600020905b815481529060010190602001808311610a4857829003601f168201915b5050505050828281518110610a7d57610a7c611ccb565b5b60200260200101819052508080610a9390611d5a565b915050610958565b508091505090565b60076020528060005260406000206000915090508054610ac290611d29565b80601f0160208091040260200160405190810160405280929190818152602001828054610aee90611d29565b8015610b3b5780601f10610b1057610100808354040283529160200191610b3b565b820191906000526020600020905b815481529060010190602001808311610b1e57829003601f168201915b505050505081565b6000600554905090565b670de0b6b3a764000081565b60026020528060005260406000206000915090505481565b60065481565b60055481565b60606000805480602002602001604051908101604052809291908181526020018280548015610c0157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610bb7575b5050505050905090565b80600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209081610c579190611f4e565b503373ffffffffffffffffffffffffffffffffffffffff167f472da4d064218fa97032725fbcff922201fa643fed0765b5ffe0ceef63d7b3dc82604051610c9e919061190c565b60405180910390a250565b60045481565b6000600654905090565b60008181548110610cc957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000610d598261121b565b158015610dbf5750670de0b6b3a76400006fffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b9050919050565b60065460008054905010610e0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0690612092565b60405180910390fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600080549050600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080670de0b6b3a76400006fffffffffffffffffffffffffffffffff1683610f809190611c2b565b1115610fc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb8906120fe565b60405180910390fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611010919061211e565b925050819055508160046000828254611029919061211e565b925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015611076573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f1fe665070598cad3c4cc651126f3f92b7b48ae461c589b6f8999bac076befd3f836040516110bd91906116a4565b60405180910390a25050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508060046000828254611164919061211e565b925050819055506111743361121b565b156111835761118233611271565b5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156111c9573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f758260405161121091906116a4565b60405180910390a250565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600554600080549050116112ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b1906121c4565b60405180910390fd5b600080549050600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410611340576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611337906120fe565b60405180910390fd5b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006001600080549050611398919061211e565b90508082146114865760008082815481106113b6576113b5611ccb565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600084815481106113f8576113f7611ccb565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000805480611535576115346121e4565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b600082825260208201905092915050565b7f4f6e6c7920454f412063616e2063616c6c2066756e6374696f6e000000000000600082015250565b60006115b6601a8361156f565b91506115c182611580565b602082019050919050565b600060208201905081810360008301526115e5816115a9565b9050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061162b82611600565b9050919050565b61163b81611620565b811461164657600080fd5b50565b60008135905061165881611632565b92915050565b600060208284031215611674576116736115f6565b5b600061168284828501611649565b91505092915050565b6000819050919050565b61169e8161168b565b82525050565b60006020820190506116b96000830184611695565b92915050565b60008115159050919050565b6116d4816116bf565b82525050565b60006020820190506116ef60008301846116cb565b92915050565b6116fe8161168b565b811461170957600080fd5b50565b60008135905061171b816116f5565b92915050565b600060208284031215611737576117366115f6565b5b60006117458482850161170c565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156117b4578082015181840152602081019050611799565b60008484015250505050565b6000601f19601f8301169050919050565b60006117dc8261177a565b6117e68185611785565b93506117f6818560208601611796565b6117ff816117c0565b840191505092915050565b600061181683836117d1565b905092915050565b6000602082019050919050565b60006118368261174e565b6118408185611759565b9350836020820285016118528561176a565b8060005b8581101561188e578484038952815161186f858261180a565b945061187a8361181e565b925060208a01995050600181019050611856565b50829750879550505050505092915050565b600060208201905081810360008301526118ba818461182b565b905092915050565b600082825260208201905092915050565b60006118de8261177a565b6118e881856118c2565b93506118f8818560208601611796565b611901816117c0565b840191505092915050565b6000602082019050818103600083015261192681846118d3565b905092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6119538161192e565b82525050565b600060208201905061196e600083018461194a565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6119a981611620565b82525050565b60006119bb83836119a0565b60208301905092915050565b6000602082019050919050565b60006119df82611974565b6119e9818561197f565b93506119f483611990565b8060005b83811015611a25578151611a0c88826119af565b9750611a17836119c7565b9250506001810190506119f8565b5085935050505092915050565b60006020820190508181036000830152611a4c81846119d4565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611a96826117c0565b810181811067ffffffffffffffff82111715611ab557611ab4611a5e565b5b80604052505050565b6000611ac86115ec565b9050611ad48282611a8d565b919050565b600067ffffffffffffffff821115611af457611af3611a5e565b5b611afd826117c0565b9050602081019050919050565b82818337600083830152505050565b6000611b2c611b2784611ad9565b611abe565b905082815260208101848484011115611b4857611b47611a59565b5b611b53848285611b0a565b509392505050565b600082601f830112611b7057611b6f611a54565b5b8135611b80848260208601611b19565b91505092915050565b600060208284031215611b9f57611b9e6115f6565b5b600082013567ffffffffffffffff811115611bbd57611bbc6115fb565b5b611bc984828501611b5b565b91505092915050565b611bdb81611620565b82525050565b6000602082019050611bf66000830184611bd2565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c368261168b565b9150611c418361168b565b9250828201905080821115611c5957611c58611bfc565b5b92915050565b7f4f6e6c79207374616b65722063616e2063616c6c2066756e6374696f6e000000600082015250565b6000611c95601d8361156f565b9150611ca082611c5f565b602082019050919050565b60006020820190508181036000830152611cc481611c88565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611d4157607f821691505b602082108103611d5457611d53611cfa565b5b50919050565b6000611d658261168b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611d9757611d96611bfc565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611e047fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611dc7565b611e0e8683611dc7565b95508019841693508086168417925050509392505050565b6000819050919050565b6000611e4b611e46611e418461168b565b611e26565b61168b565b9050919050565b6000819050919050565b611e6583611e30565b611e79611e7182611e52565b848454611dd4565b825550505050565b600090565b611e8e611e81565b611e99818484611e5c565b505050565b5b81811015611ebd57611eb2600082611e86565b600181019050611e9f565b5050565b601f821115611f0257611ed381611da2565b611edc84611db7565b81016020851015611eeb578190505b611eff611ef785611db7565b830182611e9e565b50505b505050565b600082821c905092915050565b6000611f2560001984600802611f07565b1980831691505092915050565b6000611f3e8383611f14565b9150826002028217905092915050565b611f578261177a565b67ffffffffffffffff811115611f7057611f6f611a5e565b5b611f7a8254611d29565b611f85828285611ec1565b600060209050601f831160018114611fb85760008415611fa6578287015190505b611fb08582611f32565b865550612018565b601f198416611fc686611da2565b60005b82811015611fee57848901518255600182019150602085019450602081019050611fc9565b8683101561200b5784890151612007601f891682611f14565b8355505b6001600288020188555050505b505050505050565b7f56616c696461746f72207365742068617320726561636865642066756c6c206360008201527f6170616369747900000000000000000000000000000000000000000000000000602082015250565b600061207c60278361156f565b915061208782612020565b604082019050919050565b600060208201905081810360008301526120ab8161206f565b9050919050565b7f696e646578206f7574206f662072616e67650000000000000000000000000000600082015250565b60006120e860128361156f565b91506120f3826120b2565b602082019050919050565b60006020820190508181036000830152612117816120db565b9050919050565b60006121298261168b565b91506121348361168b565b925082820390508181111561214c5761214b611bfc565b5b92915050565b7f56616c696461746f72732063616e2774206265206c657373207468616e20746860008201527f65206d696e696d756d2072657175697265642076616c696461746f72206e756d602082015250565b60006121ae60408361156f565b91506121b982612152565b604082019050919050565b600060208201905081810360008301526121dd816121a1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220efe5338b43d012f6bf8bc8b56cf478412d66fd51ecc6dbaaa5e157941733892164736f6c63430008130033"
)

// PredeployStakingSC is a helper method for setting up the staking smart contract account,
// using the passed in validators as pre-staked validators
func PredeployStakingSC(
	vals validators.Validators,
	params PredeployParams,
) (*chain.GenesisAccount, error) {
	// Set the code for the staking smart contract
	scHex, _ := hex.DecodeHex(StakingSCBytecode)
	stakingAccount := &chain.GenesisAccount{
		Code: scHex,
	}

	// Parse the default staked balance value into *big.Int
	val := DefaultStakedBalance
	bigDefaultStakedBalance, err := types.ParseUint256orHex(&val)

	if err != nil {
		return nil, fmt.Errorf("unable to generate DefaultStatkedBalance, %w", err)
	}

	// Generate the empty account storage map
	storageMap := make(map[types.Hash]types.Hash)
	bigTrueValue := big.NewInt(1)
	stakedAmount := big.NewInt(0)
	bigMinNumValidators := big.NewInt(int64(params.MinValidatorCount))
	bigMaxNumValidators := big.NewInt(int64(params.MaxValidatorCount))
	valsLen := big.NewInt(0)

	if vals != nil {
		valsLen = big.NewInt(int64(vals.Len()))

		for idx := 0; idx < vals.Len(); idx++ {
			validator := vals.At(uint64(idx))

			idxStakedBalance := new(big.Int).Mul(new(big.Int).SetUint64(uint64(idx+1)), bigDefaultStakedBalance)
			// Update the total staked amount
			stakedAmount = stakedAmount.Add(stakedAmount, idxStakedBalance)

			// Get the storage indexes
			storageIndexes := getStorageIndexes(validator, idx)

			// Set the value for the validators array
			storageMap[types.BytesToHash(storageIndexes.ValidatorsIndex)] =
				types.BytesToHash(
					validator.Addr().Bytes(),
				)

			if blsValidator, ok := validator.(*validators.BLSValidator); ok {
				setBytesToStorage(
					storageMap,
					storageIndexes.ValidatorBLSPublicKeyIndex,
					blsValidator.BLSPublicKey,
				)
			}

			// Set the value for the address -> validator array index mapping
			storageMap[types.BytesToHash(storageIndexes.AddressToIsValidatorIndex)] =
				types.BytesToHash(bigTrueValue.Bytes())

			// Set the value for the address -> staked amount mapping
			storageMap[types.BytesToHash(storageIndexes.AddressToStakedAmountIndex)] =
				types.StringToHash(hex.EncodeBig(idxStakedBalance))

			// Set the value for the address -> validator index mapping
			storageMap[types.BytesToHash(storageIndexes.AddressToValidatorIndexIndex)] =
				types.StringToHash(hex.EncodeUint64(uint64(idx)))
		}
	}

	// Set the value for the total staked amount
	storageMap[types.BytesToHash(big.NewInt(stakedAmountSlot).Bytes())] =
		types.BytesToHash(stakedAmount.Bytes())

	// Set the value for the size of the validators array
	storageMap[types.BytesToHash(big.NewInt(validatorsSlot).Bytes())] =
		types.BytesToHash(valsLen.Bytes())

	// Set the value for the minimum number of validators
	storageMap[types.BytesToHash(big.NewInt(minNumValidatorSlot).Bytes())] =
		types.BytesToHash(bigMinNumValidators.Bytes())

	// Set the value for the maximum number of validators
	storageMap[types.BytesToHash(big.NewInt(maxNumValidatorSlot).Bytes())] =
		types.BytesToHash(bigMaxNumValidators.Bytes())

	// Save the storage map
	stakingAccount.Storage = storageMap

	// Set the Staking SC balance to numValidators * defaultStakedBalance
	stakingAccount.Balance = stakedAmount

	return stakingAccount, nil
}
