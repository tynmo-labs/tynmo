package staking

import (
	"fmt"
	"math/big"

	"tynmo/chain"
	"tynmo/helper/common"
	"tynmo/helper/hex"
	"tynmo/helper/keccak"
	"tynmo/types"
	"tynmo/validators"
)

var (
	BaseReward   = uint64(0x100000000)
	RewardWallet = types.StringToAddress("0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE")
	Owner        = types.StringToAddress("0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE")
)

// getAddressMapping returns the key for the SC storage mapping (address => something)
//
// More information:
// https://docs.soliditylang.org/en/latest/internals/layout_in_storage.html
func getAddressMapping(address types.Address, slot int64) []byte {
	bigSlot := big.NewInt(slot)

	finalSlice := append(
		common.PadLeftOrTrim(address.Bytes(), 32),
		common.PadLeftOrTrim(bigSlot.Bytes(), 32)...,
	)

	return keccak.Keccak256(nil, finalSlice)
}

// getIndexWithOffset is a helper method for adding an offset to the already found keccak hash
func getIndexWithOffset(keccakHash []byte, offset uint64) []byte {
	bigOffset := big.NewInt(int64(offset))
	bigKeccak := big.NewInt(0).SetBytes(keccakHash)

	bigKeccak.Add(bigKeccak, bigOffset)

	return bigKeccak.Bytes()
}

// getStorageIndexes is a helper function for getting the correct indexes
// of the storage slots which need to be modified during bootstrap.
//
// It is SC dependant, and based on the SC located at:
func getStorageIndexes(validator validators.Validator, index int) *StorageIndexes {
	storageIndexes := &StorageIndexes{}
	address := validator.Addr()

	// Get the indexes for the mappings
	// The index for the mapping is retrieved with:
	// keccak(address . slot)
	// . stands for concatenation (basically appending the bytes)

	storageIndexes.AddressToValidatorIndexIndex = getAddressMapping(
		address,
		addressToValidatorIndexSlot,
	)

	storageIndexes.ValidatorsMapIndex = getAddressMapping(
		address,
		validatorsMapSlot,
	)

	storageIndexes.ValidatorStakeIndex = getIndexWithOffset(
		storageIndexes.ValidatorsMapIndex,
		uint64(validatorStake),
	)

	storageIndexes.ValidatorRewardIndex = getIndexWithOffset(
		storageIndexes.ValidatorsMapIndex,
		uint64(validatorReward),
	)

	storageIndexes.ValidatorIsActiveIndex = getIndexWithOffset(
		storageIndexes.ValidatorsMapIndex,
		uint64(validatorIsActive),
	)

	storageIndexes.ValidatorIsWhitelistedIndex = getIndexWithOffset(
		storageIndexes.ValidatorsMapIndex,
		uint64(validatorIsWhitelisted),
	)

	storageIndexes.ValidatorBlsKeyIndex = getIndexWithOffset(
		storageIndexes.ValidatorsMapIndex,
		uint64(validatorBlsKey),
	)

	// Index for array types is calculated as keccak(slot) + index
	// The slot for the dynamic arrays that's put in the keccak needs to be in hex form (padded 64 chars)
	storageIndexes.ValidatorsIndex = getIndexWithOffset(
		keccak.Keccak256(nil, common.PadLeftOrTrim(big.NewInt(validatorsSlot).Bytes(), 32)),
		uint64(index),
	)

	return storageIndexes
}

// setBytesToStorage sets bytes data into storage map from specified base index
func setBytesToStorage(
	storageMap map[types.Hash]types.Hash,
	baseIndexBytes []byte,
	data []byte,
) {
	dataLen := len(data)
	baseIndex := types.BytesToHash(baseIndexBytes)

	if dataLen <= 31 {
		bytes := types.Hash{}

		copy(bytes[:len(data)], data)

		// Set 2*Size at the first byte
		bytes[len(bytes)-1] = byte(dataLen * 2)

		storageMap[baseIndex] = bytes

		return
	}

	// Set size at the base index
	baseSlot := types.Hash{}
	baseSlot[31] = byte(2*dataLen + 1)
	storageMap[baseIndex] = baseSlot

	zeroIndex := keccak.Keccak256(nil, baseIndexBytes)
	numBytesInSlot := 256 / 8

	for i := 0; i < dataLen; i++ {
		offset := i / numBytesInSlot

		slotIndex := types.BytesToHash(getIndexWithOffset(zeroIndex, uint64(offset)))
		byteIndex := i % numBytesInSlot

		slot := storageMap[slotIndex]
		slot[byteIndex] = data[i]

		storageMap[slotIndex] = slot
	}
}

// PredeployParams contains the values used to predeploy the PoS staking contract
type PredeployParams struct {
	RewardWallet types.Address
	BaseReward   uint64
	Owner        types.Address
}

// StorageIndexes is a wrapper for different storage indexes that
// need to be modified
type StorageIndexes struct {
	ValidatorsIndex              []byte // []address
	AddressToValidatorIndexIndex []byte // mapping(address => uint256)
	ValidatorsMapIndex           []byte // mapping(address => struct)
	ValidatorStakeIndex          []byte // mapping(address => struct {uint256})
	ValidatorRewardIndex         []byte // mapping(address => struct {uint256})
	ValidatorBlsKeyIndex         []byte // mapping(address => struct {byte[]})
	ValidatorIsActiveIndex       []byte // mapping(address => struct {bool})
	ValidatorIsWhitelistedIndex  []byte // mapping(address => struct {bool})
}

// Slot definitions for SC storage
var (
	validatorsSlot              = int64(0) // Slot 0
	addressToValidatorIndexSlot = int64(1) // Slot 1
	validatorsMapSlot           = int64(2) // Slot 2
	stakedAmountSlot            = int64(3) // Slot 3
	rewardWalletSlot            = int64(4) // Slot 4
	baseRewardSlot              = int64(5) // Slot 5
	ownerSlot                   = int64(6) // Slot 6

	validatorStake         = int64(0) // Slot 0
	validatorReward        = int64(1) // Slot 1
	validatorBlsKey        = int64(2) // Slot 2
	validatorIsActive      = int64(3) // Slot 3
	validatorIsWhitelisted = int64(4) // Slot 4
)

const (
	DefaultStakedBalance = "0x8AC7230489E80000" // 10 ETH
	//nolint: lll
	StakingSCBytecode = "0x6080604052600436106101a05760003560e01c80635958621e116100ec578063c683630d1161008a578063d94c111b11610064578063d94c111b14610603578063f2fde38b1461062c578063facd743b14610655578063fb75b2c71461069257610258565b8063c683630d14610584578063c885bc58146105c1578063ca1e7819146105d857610258565b80637a6eea37116100c65780637a6eea37146104c25780638aaab659146104ed5780638e73064f14610518578063b63389171461054357610258565b80635958621e1461045757806376ad03bc1461048057806379ba5097146104ab57610258565b80632def6620116101595780633c561f04116101335780633c561f04146103bc5780634a829c1c146103e75780635316b57314610412578063542c85f21461042e57610258565b80632def662014610370578063373d6132146103875780633a4b66f1146103b257610258565b806302b751991461025d5780630373a23a1461029a57806307358b99146102c35780631aa3a008146103005780632367f6b51461030a57806325d5971f1461034757610258565b36610258576101c43373ffffffffffffffffffffffffffffffffffffffff166106bd565b15610204576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fb90612490565b60405180910390fd5b61020d336106d0565b61024c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610243906124fc565b60405180910390fd5b610256333461071e565b005b600080fd5b34801561026957600080fd5b50610284600480360381019061027f919061258e565b6107e2565b60405161029191906125d4565b60405180910390f35b3480156102a657600080fd5b506102c160048036038101906102bc919061261b565b6107fa565b005b3480156102cf57600080fd5b506102ea60048036038101906102e5919061261b565b610894565b6040516102f791906125d4565b60405180910390f35b6103086108ac565b005b34801561031657600080fd5b50610331600480360381019061032c919061258e565b610927565b60405161033e91906125d4565b60405180910390f35b34801561035357600080fd5b5061036e6004803603810190610369919061261b565b610973565b005b34801561037c57600080fd5b50610385610a05565b005b34801561039357600080fd5b5061039c610a95565b6040516103a991906125d4565b60405180910390f35b6103ba610a9f565b005b3480156103c857600080fd5b506103d1610b52565b6040516103de919061279a565b60405180910390f35b3480156103f357600080fd5b506103fc610d48565b60405161040991906125d4565b60405180910390f35b61042c60048036038101906104279190612904565b610de2565b005b34801561043a57600080fd5b50610455600480360381019061045091906129bb565b611063565b005b34801561046357600080fd5b5061047e6004803603810190610479919061258e565b61114f565b005b34801561048c57600080fd5b50610495611223565b6040516104a291906125d4565b60405180910390f35b3480156104b757600080fd5b506104c061122d565b005b3480156104ce57600080fd5b506104d76113c9565b6040516104e49190612a33565b60405180910390f35b3480156104f957600080fd5b506105026113d5565b60405161050f91906125d4565b60405180910390f35b34801561052457600080fd5b5061052d61146f565b60405161053a91906125d4565b60405180910390f35b34801561054f57600080fd5b5061056a6004803603810190610565919061258e565b611509565b60405161057b959493929190612a98565b60405180910390f35b34801561059057600080fd5b506105ab60048036038101906105a6919061258e565b6115c7565b6040516105b89190612b0d565b60405180910390f35b3480156105cd57600080fd5b506105d6611615565b005b3480156105e457600080fd5b506105ed6117a5565b6040516105fa9190612be6565b60405180910390f35b34801561060f57600080fd5b5061062a60048036038101906106259190612cbd565b611833565b005b34801561063857600080fd5b50610653600480360381019061064e919061258e565b6118d4565b005b34801561066157600080fd5b5061067c6004803603810190610677919061258e565b611a24565b6040516106899190612b0d565b60405180910390f35b34801561069e57600080fd5b506106a7611a72565b6040516106b49190612d15565b60405180910390f35b600080823b905060008111915050919050565b600060028060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154149050919050565b80600360008282546107309190612d5f565b9250508190555080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546107899190612d5f565b925050819055508173ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d826040516107d691906125d4565b60405180910390a25050565b60016020528060005260406000206000915090505481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461088a576040517f973d02cb00000000000000000000000000000000000000000000000000000000815260040161088190612ddf565b60405180910390fd5b8060058190555050565b600b6020528060005260406000206000915090505481565b6108b5336115c7565b6108f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108eb90612e4b565b60405180910390fd5b600033905061090281611a9c565b156109245761091081611b4d565b61091a813461071e565b61092381611cd4565b5b50565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154116109f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ef90612eb7565b60405180910390fd5b610a023382611d62565b50565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015411610a8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8190612eb7565b60405180910390fd5b610a9333611f1d565b565b6000600354905090565b610abe3373ffffffffffffffffffffffffffffffffffffffff166106bd565b15610afe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af590612490565b60405180910390fd5b610b07336106d0565b610b46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3d906124fc565b60405180910390fd5b610b50333461071e565b565b60606000808054905067ffffffffffffffff811115610b7457610b736127c1565b5b604051908082528060200260200182016040528015610ba757816020015b6060815260200190600190039081610b925790505b50905060005b600080549050811015610d4057610c0160008281548110610bd157610bd0612ed7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611a24565b15610d2d5760026000808381548110610c1d57610c1c612ed7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018054610c9090612f35565b80601f0160208091040260200160405190810160405280929190818152602001828054610cbc90612f35565b8015610d095780601f10610cde57610100808354040283529160200191610d09565b820191906000526020600020905b815481529060010190602001808311610cec57829003601f168201915b5050505050828281518110610d2157610d20612ed7565b5b60200260200101819052505b8080610d3890612f66565b915050610bad565b508091505090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610dda576040517f973d02cb000000000000000000000000000000000000000000000000000000008152600401610dd190612ddf565b60405180910390fd5b600954905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e72576040517f973d02cb000000000000000000000000000000000000000000000000000000008152600401610e6990612ffa565b60405180910390fd5b6000600b60008481526020019081526020016000205414610ec8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebf90613066565b60405180910390fd5b8051600554610ed79190613086565b341015610f19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1090613114565b60405180910390fd5b60005b8151811015611024576000828281518110610f3a57610f39612ed7565b5b60200260200101519050610f4d816106d0565b1561101057600554600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000828254610fa69190612d5f565b92505081905550600554600b60008681526020019081526020016000206000828254610fd29190612d5f565b9250508190555060055460086000828254610fed9190612d5f565b92505081905550600554600a60008282546110089190612d5f565b925050819055505b50808061101c90612f66565b915050610f1c565b50817feaf3d57629d9b1ce95715ccd98d6f5bf48023be1d5a06e09f64ab7f6d8be01d560055460405161105791906125d4565b60405180910390a25050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110f3576040517f973d02cb0000000000000000000000000000000000000000000000000000000081526004016110ea90612ddf565b60405180910390fd5b600082829050905060005b818110156111495761113684848381811061111c5761111b612ed7565b5b9050602002016020810190611131919061258e565b612067565b808061114190612f66565b9150506110fe565b50505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111df576040517f973d02cb0000000000000000000000000000000000000000000000000000000081526004016111d690612ddf565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600554905090565b3373ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146112bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b4906131a6565b60405180910390fd5b600760006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b670de0b6b3a764000081565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611467576040517f973d02cb00000000000000000000000000000000000000000000000000000000815260040161145e90612ddf565b60405180910390fd5b600854905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611501576040517f973d02cb0000000000000000000000000000000000000000000000000000000081526004016114f890612ddf565b60405180910390fd5b600a54905090565b600260205280600052604060002060009150905080600001549080600101549080600201805461153890612f35565b80601f016020809104026020016040519081016040528092919081815260200182805461156490612f35565b80156115b15780601f10611586576101008083540402835291602001916115b1565b820191906000526020600020905b81548152906001019060200180831161159457829003601f168201915b5050505050908060030154908060040154905085565b600060028060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154149050919050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541161169a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169190613212565b60405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550806008600082825461173b9190613232565b9250508190555080600960008282546117549190612d5f565b925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156117a1573d6000803e3d6000fd5b5050565b6060600080548060200260200160405190810160405280929190818152602001828054801561182957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116117df575b5050505050905090565b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020190816118829190613412565b503373ffffffffffffffffffffffffffffffffffffffff167f472da4d064218fa97032725fbcff922201fa643fed0765b5ffe0ceef63d7b3dc826040516118c991906134e4565b60405180910390a250565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611964576040517f973d02cb00000000000000000000000000000000000000000000000000000000815260040161195b90612ddf565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b600060028060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154149050919050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000611aa7826106d0565b15611ae7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ade90613552565b60405180910390fd5b670de0b6b3a76400006fffffffffffffffffffffffffffffffff16341015611b44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3b906135e4565b60405180910390fd5b60019050919050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506002816004015414611bd7576040517f973d02cb000000000000000000000000000000000000000000000000000000008152600401611bce90613650565b60405180910390fd5b60028160030181905550600080549050600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff167fd09501348473474a20c772c79c653e1fd7e8b437e418fe235d277d2c8885325160405160405180910390a25050565b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401819055508073ffffffffffffffffffffffffffffffffffffffff167fcdd2e9b91a56913d370075169cefa1602ba36be5301664f752192bb1709df75760405160405180910390a250565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154905080670de0b6b3a76400006fffffffffffffffffffffffffffffffff1683611dd09190612d5f565b1115611e11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e08906136bc565b60405180910390fd5b81600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254611e639190613232565b925050819055508160036000828254611e7c9190613232565b925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015611ec9573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f1fe665070598cad3c4cc651126f3f92b7b48ae461c589b6f8999bac076befd3f83604051611f1091906125d4565b60405180910390a2505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015490506000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055508060036000828254611fbe9190613232565b92505081905550611fce826120b6565b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015612014573d6000803e3d6000fd5b508173ffffffffffffffffffffffffffffffffffffffff167f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f758260405161205b91906125d4565b60405180910390a25050565b6120708161218c565b8073ffffffffffffffffffffffffffffffffffffffff167fa850ae9193f515cbae8d35e8925bd2be26627fc91bce650b8652ed254e9cab0360405160405180910390a250565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015403612189576001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030181905550612151816121d6565b7f23d934bfe7f1275bc6fd70432159c9cc1c0075d069f89da6a40f43bfe7a94ed3816040516121809190612d15565b60405180910390a15b50565b60028060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004018190555050565b600080549050600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541061225c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225390613728565b60405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600060016000805490506122b49190613232565b90508082146123a25760008082815481106122d2576122d1612ed7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806000848154811061231457612313612ed7565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008054806123f9576123f8613748565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b600082825260208201905092915050565b7f4f6e6c7920454f412063616e2063616c6c2066756e6374696f6e000000000000600082015250565b600061247a601a83612433565b915061248582612444565b602082019050919050565b600060208201905081810360008301526124a98161246d565b9050919050565b7f4f6e6c792076616c696461746f722063616e2063616c6c2066756e6374696f6e600082015250565b60006124e6602083612433565b91506124f1826124b0565b602082019050919050565b60006020820190508181036000830152612515816124d9565b9050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061255b82612530565b9050919050565b61256b81612550565b811461257657600080fd5b50565b60008135905061258881612562565b92915050565b6000602082840312156125a4576125a3612526565b5b60006125b284828501612579565b91505092915050565b6000819050919050565b6125ce816125bb565b82525050565b60006020820190506125e960008301846125c5565b92915050565b6125f8816125bb565b811461260357600080fd5b50565b600081359050612615816125ef565b92915050565b60006020828403121561263157612630612526565b5b600061263f84828501612606565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156126ae578082015181840152602081019050612693565b60008484015250505050565b6000601f19601f8301169050919050565b60006126d682612674565b6126e0818561267f565b93506126f0818560208601612690565b6126f9816126ba565b840191505092915050565b600061271083836126cb565b905092915050565b6000602082019050919050565b600061273082612648565b61273a8185612653565b93508360208202850161274c85612664565b8060005b8581101561278857848403895281516127698582612704565b945061277483612718565b925060208a01995050600181019050612750565b50829750879550505050505092915050565b600060208201905081810360008301526127b48184612725565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6127f9826126ba565b810181811067ffffffffffffffff82111715612818576128176127c1565b5b80604052505050565b600061282b61251c565b905061283782826127f0565b919050565b600067ffffffffffffffff821115612857576128566127c1565b5b602082029050602081019050919050565b600080fd5b600061288061287b8461283c565b612821565b905080838252602082019050602084028301858111156128a3576128a2612868565b5b835b818110156128cc57806128b88882612579565b8452602084019350506020810190506128a5565b5050509392505050565b600082601f8301126128eb576128ea6127bc565b5b81356128fb84826020860161286d565b91505092915050565b6000806040838503121561291b5761291a612526565b5b600061292985828601612606565b925050602083013567ffffffffffffffff81111561294a5761294961252b565b5b612956858286016128d6565b9150509250929050565b600080fd5b60008083601f84011261297b5761297a6127bc565b5b8235905067ffffffffffffffff81111561299857612997612960565b5b6020830191508360208202830111156129b4576129b3612868565b5b9250929050565b600080602083850312156129d2576129d1612526565b5b600083013567ffffffffffffffff8111156129f0576129ef61252b565b5b6129fc85828601612965565b92509250509250929050565b60006fffffffffffffffffffffffffffffffff82169050919050565b612a2d81612a08565b82525050565b6000602082019050612a486000830184612a24565b92915050565b600082825260208201905092915050565b6000612a6a82612674565b612a748185612a4e565b9350612a84818560208601612690565b612a8d816126ba565b840191505092915050565b600060a082019050612aad60008301886125c5565b612aba60208301876125c5565b8181036040830152612acc8186612a5f565b9050612adb60608301856125c5565b612ae860808301846125c5565b9695505050505050565b60008115159050919050565b612b0781612af2565b82525050565b6000602082019050612b226000830184612afe565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612b5d81612550565b82525050565b6000612b6f8383612b54565b60208301905092915050565b6000602082019050919050565b6000612b9382612b28565b612b9d8185612b33565b9350612ba883612b44565b8060005b83811015612bd9578151612bc08882612b63565b9750612bcb83612b7b565b925050600181019050612bac565b5085935050505092915050565b60006020820190508181036000830152612c008184612b88565b905092915050565b600080fd5b600067ffffffffffffffff821115612c2857612c276127c1565b5b612c31826126ba565b9050602081019050919050565b82818337600083830152505050565b6000612c60612c5b84612c0d565b612821565b905082815260208101848484011115612c7c57612c7b612c08565b5b612c87848285612c3e565b509392505050565b600082601f830112612ca457612ca36127bc565b5b8135612cb4848260208601612c4d565b91505092915050565b600060208284031215612cd357612cd2612526565b5b600082013567ffffffffffffffff811115612cf157612cf061252b565b5b612cfd84828501612c8f565b91505092915050565b612d0f81612550565b82525050565b6000602082019050612d2a6000830184612d06565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612d6a826125bb565b9150612d75836125bb565b9250828201905080821115612d8d57612d8c612d30565b5b92915050565b7f4f6e6c79206f776e65722063616e2063616c6c2066756e6374696f6e00000000600082015250565b6000612dc9601c83612433565b9150612dd482612d93565b602082019050919050565b60006020820190508181036000830152612df881612dbc565b9050919050565b7f4f6e6c792077686974656c6973742063616e2063616c6c2066756e6374696f6e600082015250565b6000612e35602083612433565b9150612e4082612dff565b602082019050919050565b60006020820190508181036000830152612e6481612e28565b9050919050565b7f4f6e6c79207374616b65722063616e2063616c6c2066756e6374696f6e000000600082015250565b6000612ea1601d83612433565b9150612eac82612e6b565b602082019050919050565b60006020820190508181036000830152612ed081612e94565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612f4d57607f821691505b602082108103612f6057612f5f612f06565b5b50919050565b6000612f71826125bb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612fa357612fa2612d30565b5b600182019050919050565b7f5265776172642057616c6c65742043616c6c0000000000000000000000000000600082015250565b6000612fe4601283612433565b9150612fef82612fae565b602082019050919050565b6000602082019050818103600083015261301381612fd7565b9050919050565b7f52657761726420616c7265616479206469737472696275746564000000000000600082015250565b6000613050601a83612433565b915061305b8261301a565b602082019050919050565b6000602082019050818103600083015261307f81613043565b9050919050565b6000613091826125bb565b915061309c836125bb565b92508282026130aa816125bb565b915082820484148315176130c1576130c0612d30565b5b5092915050565b7f4e6f7420656e6f756768207265776172642076616c7565000000000000000000600082015250565b60006130fe601783612433565b9150613109826130c8565b602082019050919050565b6000602082019050818103600083015261312d816130f1565b9050919050565b7f4f776e61626c6532537465703a2063616c6c6572206973206e6f74207468652060008201527f6e6577206f776e65720000000000000000000000000000000000000000000000602082015250565b6000613190602983612433565b915061319b82613134565b604082019050919050565b600060208201905081810360008301526131bf81613183565b9050919050565b7f4f6e6c792072657761726465722063616e2063616c6c2066756e6374696f6e00600082015250565b60006131fc601f83612433565b9150613207826131c6565b602082019050919050565b6000602082019050818103600083015261322b816131ef565b9050919050565b600061323d826125bb565b9150613248836125bb565b92508282039050818111156132605761325f612d30565b5b92915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026132c87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261328b565b6132d2868361328b565b95508019841693508086168417925050509392505050565b6000819050919050565b600061330f61330a613305846125bb565b6132ea565b6125bb565b9050919050565b6000819050919050565b613329836132f4565b61333d61333582613316565b848454613298565b825550505050565b600090565b613352613345565b61335d818484613320565b505050565b5b818110156133815761337660008261334a565b600181019050613363565b5050565b601f8211156133c65761339781613266565b6133a08461327b565b810160208510156133af578190505b6133c36133bb8561327b565b830182613362565b50505b505050565b600082821c905092915050565b60006133e9600019846008026133cb565b1980831691505092915050565b600061340283836133d8565b9150826002028217905092915050565b61341b82612674565b67ffffffffffffffff811115613434576134336127c1565b5b61343e8254612f35565b613449828285613385565b600060209050601f83116001811461347c576000841561346a578287015190505b61347485826133f6565b8655506134dc565b601f19841661348a86613266565b60005b828110156134b25784890151825560018201915060208501945060208101905061348d565b868310156134cf57848901516134cb601f8916826133d8565b8355505b6001600288020188555050505b505050505050565b600060208201905081810360008301526134fe8184612a5f565b905092915050565b7f4163636f756e7420697320616c726561647920612076616c696461746f720000600082015250565b600061353c601e83612433565b915061354782613506565b602082019050919050565b6000602082019050818103600083015261356b8161352f565b9050919050565b7f4163636f756e7420646f6573206e6f74206d656574206d696e696d756d20737460008201527f616b650000000000000000000000000000000000000000000000000000000000602082015250565b60006135ce602383612433565b91506135d982613572565b604082019050919050565b600060208201905081810360008301526135fd816135c1565b9050919050565b7f57484954454c4953540000000000000000000000000000000000000000000000600082015250565b600061363a600983612433565b915061364582613604565b602082019050919050565b600060208201905081810360008301526136698161362d565b9050919050565b7f776974686472617720616d6f756e74206f7574206f662072616e676500000000600082015250565b60006136a6601c83612433565b91506136b182613670565b602082019050919050565b600060208201905081810360008301526136d581613699565b9050919050565b7f696e646578206f7574206f662072616e67650000000000000000000000000000600082015250565b6000613712601283612433565b915061371d826136dc565b602082019050919050565b6000602082019050818103600083015261374181613705565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212209ee61630c6b95fac5250d7954e0c7debb7fa04cb7b71bd95e31d0db7019a03fb64736f6c63430008130033"
)

// PredeployStakingSC is a helper method for setting up the staking smart contract account,
// using the passed in validators as pre-staked validators
func PredeployStakingSC(
	vals validators.Validators,
	params PredeployParams,
) (*chain.GenesisAccount, error) {
	// Set the code for the staking smart contract
	scHex, _ := hex.DecodeHex(StakingSCBytecode)
	stakingAccount := &chain.GenesisAccount{
		Code: scHex,
	}

	// Parse the default staked balance value into *big.Int
	val := DefaultStakedBalance
	bigDefaultStakedBalance, err := types.ParseUint256orHex(&val)
	if err != nil {
		return nil, fmt.Errorf("unable to generate DefaultStatkedBalance, %w", err)
	}

	// Generate the empty account storage map
	storageMap := make(map[types.Hash]types.Hash)
	bigTrueValue := big.NewInt(2)
	bigFalseValue := big.NewInt(1)
	stakedAmount := big.NewInt(0)
	rewardWallet := params.RewardWallet
	baseReward := big.NewInt(int64(params.BaseReward))
	owner := params.Owner
	valsLen := big.NewInt(0)

	if vals != nil {
		valsLen = big.NewInt(int64(vals.Len()))

		for idx := 0; idx < vals.Len(); idx++ {
			validator := vals.At(uint64(idx))

			idxStakedBalance := new(big.Int).Mul(new(big.Int).SetUint64(uint64(idx+1)), bigDefaultStakedBalance)
			// Update the total staked amount
			stakedAmount = stakedAmount.Add(stakedAmount, idxStakedBalance)

			// Get the storage indexes
			storageIndexes := getStorageIndexes(validator, idx)

			// Set the value for the validators array
			storageMap[types.BytesToHash(storageIndexes.ValidatorsIndex)] =
				types.BytesToHash(
					validator.Addr().Bytes(),
				)

			// Set the value for the address -> validator index mapping
			storageMap[types.BytesToHash(storageIndexes.AddressToValidatorIndexIndex)] =
				types.StringToHash(hex.EncodeUint64(uint64(idx)))

			// Set the value for the address -> Validator.Stake mapping
			storageMap[types.BytesToHash(storageIndexes.ValidatorStakeIndex)] =
				types.BytesToHash(idxStakedBalance.Bytes())

			// Set the value for the address -> Validator.Stake mapping
			storageMap[types.BytesToHash(storageIndexes.ValidatorRewardIndex)] =
				types.BytesToHash(idxStakedBalance.Bytes())

			// Set the value for the address -> Validator.IsActive mapping
			storageMap[types.BytesToHash(storageIndexes.ValidatorIsActiveIndex)] =
				types.BytesToHash(bigTrueValue.Bytes())

			// Set the value for the address -> Validator.IsWhitelisted mapping
			storageMap[types.BytesToHash(storageIndexes.ValidatorIsWhitelistedIndex)] =
				types.BytesToHash(bigFalseValue.Bytes())

			// Set the value for the address -> Validator.blsKey
			if blsValidator, ok := validator.(*validators.BLSValidator); ok {
				setBytesToStorage(
					storageMap,
					storageIndexes.ValidatorBlsKeyIndex,
					blsValidator.BLSPublicKey,
				)
			}
		}
	}

	// Set the value for the total staked amount
	storageMap[types.BytesToHash(big.NewInt(stakedAmountSlot).Bytes())] =
		types.BytesToHash(stakedAmount.Bytes())

	// Set the value for the size of the validators array
	storageMap[types.BytesToHash(big.NewInt(validatorsSlot).Bytes())] =
		types.BytesToHash(valsLen.Bytes())

	// Set the value for the reward wallet
	storageMap[types.BytesToHash(big.NewInt(rewardWalletSlot).Bytes())] =
		types.BytesToHash(rewardWallet[:])

	// Set the value for the owner
	storageMap[types.BytesToHash(big.NewInt(ownerSlot).Bytes())] =
		types.BytesToHash(owner[:])

	// Set the value for the base reward
	storageMap[types.BytesToHash(big.NewInt(baseRewardSlot).Bytes())] =
		types.BytesToHash(baseReward.Bytes())

	// Save the storage map
	stakingAccount.Storage = storageMap

	// Set the Staking SC balance to numValidators * defaultStakedBalance
	stakingAccount.Balance = stakedAmount

	return stakingAccount, nil
}
